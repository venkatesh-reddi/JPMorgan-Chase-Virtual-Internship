From a31de8336f48b8454c8fb6a42f0ee8dec0727b66 Mon Sep 17 00:00:00 2001
From: venkatesh-reddi <venkateshreddi@outlook.com>
Date: Tue, 26 Sep 2023 18:45:58 +0530
Subject: [PATCH 1/2] made required changes to App.tsx

---
 forage-jpmc-swe-task-2/src/App.tsx | 22 ++++++++++++++++++----
 1 file changed, 18 insertions(+), 4 deletions(-)

diff --git a/forage-jpmc-swe-task-2/src/App.tsx b/forage-jpmc-swe-task-2/src/App.tsx
index 0728518..b51d2a4 100755
--- a/forage-jpmc-swe-task-2/src/App.tsx
+++ b/forage-jpmc-swe-task-2/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+        this.setState({ 
+          data: serverResponds,
+          showGraph: true,
+         });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
-- 
2.41.0


From dc2414ebcc73d72b12fef16215a8934c16ab6838 Mon Sep 17 00:00:00 2001
From: venkatesh-reddi <venkateshreddi@outlook.com>
Date: Tue, 26 Sep 2023 18:51:51 +0530
Subject: [PATCH 2/2] made changes to Graph.tsx

---
 forage-jpmc-swe-task-2/src/Graph.tsx | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/forage-jpmc-swe-task-2/src/Graph.tsx b/forage-jpmc-swe-task-2/src/Graph.tsx
index 3b2a7da..b618d85 100644
--- a/forage-jpmc-swe-task-2/src/Graph.tsx
+++ b/forage-jpmc-swe-task-2/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -46,7 +46,15 @@ class Graph extends Component<IProps, {}> {
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', `
+        {"stock": "distinct count",
+        "top_ask_price": "avg",
+        "top_bid_price": "avg",
+        "timestamp": "distinct count"}`)
       // Add more Perspective configurations here.
       elem.load(this.table);
     }
-- 
2.41.0

